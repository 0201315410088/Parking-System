@model IEnumerable<RitsonCarImageBookingViewModel>

@{
    ViewData["Title"] = "My Bookings";
    Layout = "_Layout";
}

<h2 style="color: #333; font-size: 2.5rem; font-weight: 400;">My Booking History</h2>

<table class="table table-bordered table-striped" style="border-collapse: collapse; width: 100%;">
    <thead style="background-color: #f8f9fa;">
        <tr>
            <th style="text-align: center;">Slot ID</th>
            <th style="text-align: center;">Booking Start</th>
            <th style="text-align: center;">Duration</th>
            <th style="text-align: center;">Status</th>
            <th style="text-align: center;">Remaining Time</th>
            <th style="text-align: center;">Car Type</th>
            <th style="text-align: center;">Plate No</th>
            <th style="text-align: center;">Car Image</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var booking in Model)
        {
            <tr>
                <td style="text-align: center;">@booking.RitsonBookingViewModel.SlotId</td>
                <td style="text-align: center;">@booking.RitsonBookingViewModel.BookingTime.AddHours(-2).ToString("yyyy-MM-ddTHH:mm") UTC</td>
                <td style="text-align: center;">@($"{booking.RitsonBookingViewModel.BookingDuration.Days}d {booking.RitsonBookingViewModel.BookingDuration.Hours}h {booking.RitsonBookingViewModel.BookingDuration.Minutes}m")</td>
                <td style="text-align: center;">
                    <span class="badge @(booking.RitsonBookingViewModel.Status == "Active" ? "badge-success" : "badge-danger")">
                        @booking.RitsonBookingViewModel.Status
                    </span>
                </td>
                <td style="text-align: center;">
                    @if (booking.RitsonBookingViewModel.Status == "Active")
                    {
                        <span id="countdown-@booking.RitsonBookingViewModel.BookingId"
                              data-starttime="@booking.RitsonBookingViewModel.BookingTime.AddHours(-2).ToString("o")"
                              data-endtime="@booking.RitsonBookingViewModel.EndTime.AddHours(-2).ToString("o")"></span>
                    }
                    else
                    {
                        <span>Expired</span>
                    }
                </td>
                <td style="text-align: center;">@booking.RitsonBookingViewModel.RitsonCarType</td>
                <td style="text-align: center;">@booking.RitsonBookingViewModel.CarPlate</td>
                <td style="text-align: center;">
                    @if (booking.CarImageModel != null)
                    {
                        <img src="data:image;base64,@Convert.ToBase64String(booking.CarImageModel.ImageData)" alt="Car Image" class="img-fluid img-thumbnail" style="max-width: 100px; height: auto;" />
                    }
                    else
                    {
                        <p class="text-muted">No image available</p>
                    }
                </td>
            </tr>
        }
    </tbody>
</table>

<script>
    // Countdown timer logic here (if needed)
</script>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>
    class BookingManager {
        constructor() {
            this.hasLowTimeWarningShown = false;
            document.addEventListener('DOMContentLoaded', this.initializeCountdown.bind(this));
        }

        initializeCountdown() {
            setInterval(this.updateCountdown.bind(this), 1000);
        }

        updateCountdown() {
            document.querySelectorAll('[id^="countdown-"]').forEach((element) => {
                const startTime = new Date(element.getAttribute('data-starttime'));
                const endTime = new Date(element.getAttribute('data-endtime'));
                const now = new Date();

                const timeRemaining = endTime - now;

                if (now < startTime) {
                    this.handleNotStarted(startTime, now, element);
                } else if (timeRemaining > 0) {
                    this.handleActiveBooking(timeRemaining, element);
                } else {
                    this.handleExpired(element);
                }
            });
        }

        handleNotStarted(startTime, now, element) {
            element.innerHTML = this.formatTime(startTime - now) + " until start";
        }

        handleActiveBooking(timeRemaining, element) {
            element.innerHTML = this.formatTime(timeRemaining);
        }

        handleExpired(element) {
            element.innerHTML = "Expired";
        }

        formatTime(ms) {
            const hours = Math.floor((ms / (1000 * 60 * 60)) % 24);
            const minutes = Math.floor((ms / (1000 * 60)) % 60);
            const seconds = Math.floor((ms / 1000) % 60);
            return `${hours}h ${minutes}m ${seconds}s`;
        }
    }

    // Instantiate BookingManager
    const bookingManager = new BookingManager();
</script>

<style>
    .table {
        margin-top: 20px; /* Add some spacing above the table */
        border: 2px solid #007bff; /* Border for the table */
        border-radius: 5px; /* Rounded corners for the table */
    }

    .table th, .table td {
        padding: 15px; /* Padding for cells */
        text-align: center; /* Centered text */
    }

    .badge-success {
        background-color: #28a745;
    }

    .badge-danger {
        background-color: #dc3545;
    }

    h2 {
        font-size: 2.5rem;
        font-weight: 400;
        color: #333; /* Title color */
        text-align: center; /* Center title */
        margin-bottom: 20px; /* Spacing below title */
    }

    img {
        border-radius: 5px; /* Slight rounding for images */
    }

    .img-fluid {
        max-width: 100%;
        height: auto;
    }

    .img-thumbnail {
        border: 1px solid #dee2e6;
        border-radius: 0.25rem;
        padding: .25rem;
        background-color: #fff;
        transition: border-color .15s ease-in-out, box-shadow .15s ease-in-out;
    }

    .img-thumbnail:hover {
        border-color: #80bdff;
        box-shadow: 0 0 0 0.2rem rgba(0, 123, 255, .25);
    }

    /* Styling for badges */
    .badge {
        font-size: 1rem; /* Adjust badge font size */
        padding: 5px 10px; /* Padding inside badges */
    }
</style>
